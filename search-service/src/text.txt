// search-service/src/handlers.rs

use crate::models::{
    LowestPriceResponse, ProductDB, ProductExistRequest, ProductExistResponse,
    ProductInShopRequest, ProductInShopResponse, ProductResult, ProductsLowestPriceRequest,
    SearchQuery, SearchResponse, ShopProduct, StoreDB, Position,
};
use crate::search::{
    fetch_lowest_price, fetch_lowest_price_shops, fetch_most_similar, fetch_product_in_shop,
    fetch_product_nearby,
};
use crate::utils::{haversine_distance, sanitize};
use crate::AppState;
use axum::{
    extract::{Path, Query, State},
    http::StatusCode,
    response::IntoResponse,
    Json,
};
use serde_json::{json}; // removed: Value
use std::collections::{HashMap, HashSet};
use std::sync::Arc;
//use crate::utils::sanitize;


/// Handler per la ricerca dei prodotti: Modalità Standard
pub async fn search_handler(
    State(app_state): State<Arc<AppState>>,
    Query(params): Query<SearchQuery>,
) -> Result<impl IntoResponse, (StatusCode, Json<serde_json::Value>)> {
    tracing::info!("Received search query: {:?}", params);
    let position = Position {
        latitude: params.position_latitude,
        longitude: params.position_longitude,
    };
    tracing::info!("Constructed position: {:?}", position);
    
    // 1. Recupera i prodotti "most similar" (ricerca fuzzy)
    let mut most_similar = match fetch_most_similar(&app_state, &params.query).await {
        Ok(products) => products,
        Err(e) => {
            tracing::error!("Error fetching most similar products: {:?}", e);
            return Err((StatusCode::INTERNAL_SERVER_ERROR, Json(json!({"error": "Internal server error"}))));
        }
    };

    // 2. Escludi gli ID già trovati dalla ricerca per il prezzo più basso
    let exclude_ids: HashSet<String> = most_similar.iter().map(|p| p._id.clone()).collect();

    // 3. Recupera i prodotti per il prezzo più basso
    let mut lowest_price = match fetch_lowest_price(&app_state, &params.query, &exclude_ids, &position).await {
        Ok(products) => products,
        Err(e) => {
            tracing::error!("Error fetching lowest price products: {:?}", e);
            vec![]
        }
    };

    // 4. Se non ci sono risultati per il prezzo più basso, usa il più economico dai "most similar"
    if lowest_price.is_empty() && most_similar.len() > 1 {
        if let Some((_idx, min_product)) = most_similar.iter().enumerate().min_by(|(_, a), (_, b)| {
            a.price.partial_cmp(&b.price).unwrap_or(std::cmp::Ordering::Equal)
        }) {
            lowest_price.push(min_product.clone());
            // Se desideri rimuovere l'elemento dai "most similar", ricorda che la variabile è mutabile.
        }
    }

    // 5. Calcola la distanza per ogni prodotto nei "most similar"
    for product in &mut most_similar {
        product.distance = Some(haversine_distance(
            position.latitude,
            position.longitude,
            product.localization.lat,
            product.localization.lon,
        ));
    }

    // 6. Calcola la distanza per ogni prodotto in "lowest price"
    for product in &mut lowest_price {
        product.distance = Some(haversine_distance(
            position.latitude,
            position.longitude,
            product.localization.lat,
            product.localization.lon,
        ));
    }

    // 7. Restituisci la risposta finale
    Ok((StatusCode::OK, Json(SearchResponse { most_similar, lowest_price })))
}

pub async fn check_product_exist(
    State(app_state): State<Arc<AppState>>,
    Json(payload): Json<ProductExistRequest>,
) -> Result<Json<ProductExistResponse>, (StatusCode, Json<serde_json::Value>)> {
    let products = match fetch_product_nearby(&app_state, &payload.product, payload.position.latitude, payload.position.longitude).await {
        Ok(products) => products,
        Err(e) => {
            tracing::error!("Error fetching product: {:?}", e);
            return Err((StatusCode::INTERNAL_SERVER_ERROR, Json(json!({"error": "Internal server error"}))));
        }
    };

    tracing::info!("Found products: {:#?}", products);
    if let Some(product) = products.first() {
        let distance = haversine_distance(payload.position.latitude, payload.position.longitude, product.localization.lat, product.localization.lon);
        Ok(Json(ProductExistResponse {
            product: payload.product.clone(),
            exists: true,
            details: Some(ProductResult { distance: Some(distance), ..product.clone() }),
        }))
    } else {
        Ok(Json(ProductExistResponse { product: payload.product.clone(), exists: false, details: None }))
    }
}

pub async fn search_product_in_shop(
    State(app_state): State<Arc<AppState>>,
    Json(payload): Json<ProductInShopRequest>,
) -> Result<Json<ProductInShopResponse>, (StatusCode, Json<serde_json::Value>)> {
    let products = match fetch_product_in_shop(&app_state, &payload.product, &payload.shop, payload.position.latitude, payload.position.longitude).await {
        Ok(products) => products,
        Err(e) => {
            tracing::error!("Error fetching product: {:?}", e);
            return Err((StatusCode::INTERNAL_SERVER_ERROR, Json(json!({"error": "Internal server error"}))));
        }
    };

    tracing::info!("Found products: {:#?}", products);
    if let Some(product) = products.first() {
        let distance = haversine_distance(payload.position.latitude, payload.position.longitude, product.localization.lat, product.localization.lon);
        Ok(Json(ProductInShopResponse {
            product: payload.product.clone(),
            shop: payload.shop.clone(),
            exists: true,
            details: Some(ProductResult { distance: Some(distance), ..product.clone() }),
        }))
    } else {
        Ok(Json(ProductInShopResponse { product: payload.product.clone(), shop: payload.shop.clone(), exists: false, details: None }))
    }
}
pub async fn find_lowest_price(
    State(app_state): State<Arc<AppState>>,
    Json(payload): Json<ProductsLowestPriceRequest>,
) -> Result<Json<Vec<LowestPriceResponse>>, (StatusCode, Json<serde_json::Value>)> {
    tracing::info!("find_lowest_price called with payload: {:?}", payload);

    let product_prices = match fetch_lowest_price_shops(&app_state, &payload.products, &payload.position).await {
        Ok(prices) => {
            tracing::info!("Fetched product prices from Elasticsearch successfully.");
            prices
        },
        Err(e) => {
            tracing::error!("Error fetching products from Elasticsearch: {:?}", e);
            return Err((StatusCode::INTERNAL_SERVER_ERROR, Json(json!({"error": "Internal server error"}))));
        }
    };

    tracing::debug!("Product prices fetched: {:?}", product_prices);

    // Costruisci la mappa: per ogni negozio, conserva tuple (ShopProduct, input_product)
    let mut shop_combinations: HashMap<String, Vec<(ShopProduct, String)>> = HashMap::new();
    for (input_product, product_list) in &product_prices {
        for product_result in product_list {
            let distance = haversine_distance(
                payload.position.latitude,
                payload.position.longitude,
                product_result.localization.lat,
                product_result.localization.lon,
            );
            let sp = ShopProduct {
                shop: product_result.localization.grocery.clone(),
                name: product_result.name.clone(),
                description: product_result.description.clone(),
                discount: product_result.discount,
                price: product_result.price,
                distance,
            };
            shop_combinations
                .entry(product_result.localization.grocery.clone())
                .or_insert_with(Vec::new)
                .push((sp, input_product.clone()));
        }
    }
    tracing::info!("Shop combinations built: {:?}", shop_combinations);

    // Normalizza i termini richiesti
    let required_names: HashSet<String> = payload.products.iter().map(|p| sanitize(p)).collect();
    let required_count = required_names.len();
    tracing::debug!("Required products (sanitized): {:?} (count: {})", required_names, required_count);

    let mut results: Vec<LowestPriceResponse> = Vec::new();
    let mode = payload.mode.as_deref().unwrap_or("comodita");
    tracing::info!("Mode selected: {}", mode);

    match mode {
        "risparmio" => {
            tracing::warn!("La modalità 'risparmio' non è ancora implementata completamente.");
        },
        "comodita" => {
            tracing::info!("Processing in 'comodita' mode.");
            let mut best_option: Option<LowestPriceResponse> = None;
            for (shop_name, items) in &shop_combinations {
                // Per ogni negozio, seleziona il miglior prodotto per ciascun termine di input
                let mut best_for_input: HashMap<String, ShopProduct> = HashMap::new();
                for (sp, input_product) in items {
                    let key = sanitize(input_product);
                    if let Some(existing) = best_for_input.get(&key) {
                        if sp.price < existing.price {
                            best_for_input.insert(key, sp.clone());
                        }
                    } else {
                        best_for_input.insert(key, sp.clone());
                    }
                }
                // Se il negozio copre tutti i termini richiesti
                if best_for_input.len() == required_count {
                    let total_price: f64 = best_for_input.values().map(|sp| sp.price).sum();
                    //tracing::info!("Shop '{}' covers all required products with total price: {}", shop_name, total_price);
                    tracing::debug!("Shop '{}' - best_for_input: {:?}", shop_name, best_for_input);
                    let selected_products: Vec<ShopProduct> = best_for_input.into_values().collect();
                    if let Some(ref mut current_best) = best_option {
                        if total_price < current_best.total_price {
                            *current_best = LowestPriceResponse {
                                shop: shop_name.clone(),
                                total_price,
                                products: selected_products,
                            };
                        }
                    } else {
                        best_option = Some(LowestPriceResponse {
                            shop: shop_name.clone(),
                            total_price,
                            products: selected_products,
                        });
                    }
                }
            }
            if let Some(best) = best_option {
                results.push(best);
            } else {
                tracing::warn!("No single shop covers all required products in 'comodita' mode.");
            }
        },
        _ => {
            tracing::warn!("Unknown mode '{}' received. Defaulting to 'comodita'.", mode);
        }
    }
    
    if results.is_empty() {
        tracing::info!("No valid shop combinations found to cover all products.");
    } else {
        tracing::info!("Returning results: {:?}", results);
    }
    
    Ok(Json(results))
}

pub async fn get_all_stores(
    State(app_state): State<Arc<AppState>>,
) -> Result<Json<Vec<StoreDB>>, axum::http::StatusCode> {
    let db_pool = &app_state.db_pool;
    let stores = sqlx::query_as::<_, StoreDB>(
        r#"
        SELECT id, grocery, lat, lng, street, city, zip_code, working_hours, picks_up_in_store
        FROM "Localization"
        "#
    )
    .fetch_all(db_pool)
    .await
    .map_err(|e| {
        eprintln!("Database query failed: {:?}", e);
        axum::http::StatusCode::INTERNAL_SERVER_ERROR
    })?;
    Ok(Json(stores))
}

pub async fn get_products_by_store(
    Path(store_id): Path<i32>,
    State(app_state): State<Arc<AppState>>,
) -> Result<Json<Vec<ProductDB>>, axum::http::StatusCode> {
    let db_pool = &app_state.db_pool;
    let products = sqlx::query_as::<_, ProductDB>(
        r#"
        SELECT p.id, p.name, p.description, p.current_price, p.discount, p.price_for_kg, p.image_url
        FROM "Product" p
        WHERE p."localizationId" = $1
        "#
    )
    .bind(store_id)
    .fetch_all(db_pool)
    .await
    .map_err(|e| {
        eprintln!("Database query failed: {:?}", e);
        axum::http::StatusCode::INTERNAL_SERVER_ERROR
    })?;
    Ok(Json(products))
}


//search-service/src/main.rs
mod handlers;
mod models;
mod search;
mod utils;

use ::elasticsearch::Elasticsearch;
use axum::{
    routing::{get, post},
    Router,
};
use std::sync::Arc;
use tokio::sync::Mutex;

pub struct AppState {
    client: Mutex<Elasticsearch>,
    db_pool: sqlx::PgPool,
}

#[tokio::main]
async fn main() {
    tracing_subscriber::fmt()
        .with_target(false)
        .with_level(true)
        .pretty()
        .init();

    // Initialize Elasticsearch client
    let transport =
        elasticsearch::http::transport::Transport::single_node("http://elasticsearch:9200")
            .unwrap();
    let database_url = std::env::var("REMOTE_DATABASE_URL")
        .expect("REMOTE_DATABASE_URL must be set to connect to the remote database");
        
        println!("Connecting to database at URL: {}", database_url);

    let db_pool = sqlx::PgPool::connect(&database_url)
        .await
        .expect("Failed to connect to database");
    let app_state = Arc::new(AppState {
        client: Mutex::new(Elasticsearch::new(transport)),
        db_pool,
    });

    // Configure Axum router with the search route, passing client as State
    let app = Router::new()
        .route("/search", get(handlers::search_handler))
        .route("/product/exists", post(handlers::check_product_exist))
        .route("/product/in-shop", post(handlers::search_product_in_shop))
        .route("/product/lowest-price", post(handlers::find_lowest_price))
        .route("/stores", get(handlers::get_all_stores))
        .route("/store/:id/products", get(handlers::get_products_by_store))
        .with_state(app_state);

    // Start server
    let port = std::env::var("SEARCH_SERVICE_PORT").unwrap_or_else(|_| "4001".to_string());
    let url = format!("0.0.0.0:{port}");
    let listener = tokio::net::TcpListener::bind(url).await.unwrap();
    println!("Search service started at port {}", port);
    axum::serve(listener, app).await.unwrap();
}

// search-service/src/models.rs
use serde::{Deserialize, Serialize};
use sqlx::FromRow;

#[derive(Serialize, FromRow)]
pub struct StoreDB {
    pub id: i32,
    pub grocery: String,
    pub lat: f64,
    pub lng: f64,
    pub street: Option<String>,
    pub city: Option<String>,
    pub zip_code: Option<String>,
    pub working_hours: Option<String>,
    pub picks_up_in_store: Option<bool>,
}

#[derive(Serialize, FromRow, Debug, Clone)]
pub struct ProductDB {
    pub id: i32,
    pub name: String,
    pub description: String,
    pub current_price: f64,
    pub discount: f64,
    pub price_for_kg: Option<f64>,
    pub image_url: Option<String>,
}

/// Search query parameters
#[derive(Deserialize, Debug)]
pub struct SearchQuery {
    pub query: String,
    //pub position: Position, // Rende il campo pubblico
    pub position_latitude: f64,
    pub position_longitude: f64,
}

/// Struct for each product result
#[derive(Debug, Serialize, Clone)]
pub struct ProductResult {
    pub _id: String,
    pub name: String,
    pub full_name: String,
    pub description: String,
    pub price: f64,
    pub discount: Option<f64>,
    pub localization: Localization,
    pub distance: Option<f64>,
}

/// Localization information for each product
#[derive(Debug, Serialize, Clone)]
pub struct Localization {
    pub grocery: String,
    pub lat: f64,
    pub lon: f64,
}

/// Struct to organize the final response
#[derive(Serialize)]
pub struct SearchResponse {
    pub most_similar: Vec<ProductResult>,
    pub lowest_price: Vec<ProductResult>,
}

#[derive(Deserialize)]
pub struct ProductExistRequest {
    pub product: String,
    pub position: Position,
}

#[derive(Deserialize, Debug)]
pub struct Position {
    pub latitude: f64,
    pub longitude: f64,
}

#[derive(Serialize)]
pub struct ProductExistResponse {
    pub product: String,
    pub exists: bool,
    pub details: Option<ProductResult>,
}

#[derive(Deserialize)]
pub struct ProductInShopRequest {
    pub product: String,
    pub shop: String,
    pub position: Position,
}

#[derive(Serialize)]
pub struct ProductInShopResponse {
    pub product: String,
    pub shop: String,
    pub exists: bool,
    pub details: Option<ProductResult>,
}

#[derive(Deserialize, Debug)]
pub struct ProductsLowestPriceRequest {
    pub products: Vec<String>,
    pub position: Position,
    pub mode: Option<String>,  // "risparmio" | "comodita" (o altro)
}

#[derive(Debug, Serialize, Clone)]
pub struct LowestPriceResponse {
    pub shop: String,               // Name of the shop
    pub total_price: f64,           // Total price for products from this shop
    pub products: Vec<ShopProduct>, // List of products purchased from this shop
}

#[derive(Debug, Serialize, Clone)]
pub struct ShopProduct {
    pub shop: String,          // Name of the shop
    pub name: String,          // Name of the product
    pub description: String,   // Product description
    pub price: f64,            // Price of the product
    pub discount: Option<f64>, // Discount on the product, if applicable
    pub distance: f64,         // Distance from user to shop
}

#[derive(Debug, Serialize, Clone)]
pub struct LowestPriceExtended {
    pub shop: String,               // Nome del negozio
    pub total_price: f64,           // Totale dei prezzi dei prodotti trovati
    pub products: Vec<ShopProduct>, // Lista dei prodotti trovati
    pub missing: Vec<String>,       // Lista degli item mancanti (con messaggio, se vuoi)
}// search-service/src/search.rs

use crate::models::{ProductResult, Position}; //removed: Localization
use crate::AppState;
//use crate::utils::sanitize;
use elasticsearch::SearchParts;
use serde_json::json;
use std::collections::HashMap;
use std::collections::HashSet;
use std::sync::Arc;
use crate::utils::sanitize;


/// Esegue una ricerca fuzzy (ibrida) per “most similar”
/// usando una multi_match query sui campi testuali.
pub async fn fetch_most_similar(
    app_state: &Arc<AppState>,
    query: &str,
) -> Result<Vec<ProductResult>, Box<dyn std::error::Error + Send + Sync>> {
    let client = app_state.client.lock().await;
    let response = client
        .search(SearchParts::Index(&["products"]))
        .body(json!({
            "_source": ["full_name", "name", "description", "current_price", "discount", "grocery", "lat", "lon"],
            "query": {
                "multi_match": {
                    "fields": ["full_name", "name", "name.keyword", "description"],
                    "query": query,
                    "type": "best_fields",
                    "fuzziness": "AUTO"
                }
            },
            "size": 10
        }))
        .send()
        .await?;
    parse_response(response).await
}

/// Esegue una ricerca fuzzy combinata per ottenere i prodotti con prezzo più basso,
/// escludendo eventuali ID già trovati, e applicando un filtro geo.
pub async fn fetch_lowest_price(
    app_state: &Arc<AppState>,
    query: &str,
    exclude_ids: &HashSet<String>,
    position: &Position,
) -> Result<Vec<ProductResult>, Box<dyn std::error::Error + Send + Sync>> {
    let client = app_state.client.lock().await;
    let response = client
        .search(SearchParts::Index(&["products"]))
        .body(json!({
            "_source": ["full_name", "name", "description", "current_price", "discount", "grocery", "lat", "lon"],
            "query": {
                "bool": {
                    "must": {
                        "multi_match": {
                            "fields": ["full_name", "name", "name.keyword", "description"],
                            "query": query,
                            "type": "best_fields",
                            "fuzziness": "AUTO"
                        }
                    },
                    "filter": {
                        "geo_distance": {
                            "distance": "200km",
                            "location": {
                                "lat": position.latitude,
                                "lon": position.longitude
                            }
                        }
                    }
                }
            },
            "size": 10,
            "sort": [{ "current_price": "asc" }]
        }))
        .send()
        .await?;
    let products = parse_response(response).await?;
    let unique_products: Vec<ProductResult> = products
        .into_iter()
        .filter(|p| !exclude_ids.contains(&p._id))
        .collect();
    Ok(unique_products)
}

/// Fetch a single product nearby based on location.
pub async fn fetch_product_nearby(
    app_state: &Arc<AppState>,
    product: &str,
    latitude: f64,
    longitude: f64,
) -> Result<Vec<ProductResult>, Box<dyn std::error::Error + Send + Sync>> {
    let client = app_state.client.lock().await;
    let response = client
        .search(SearchParts::Index(&["products"]))
        .body(json!({
            "_source": ["full_name", "name", "description", "current_price", "discount", "grocery", "lat", "lon"],
            "query": {
                "bool": {
                    "must": {
                        "multi_match": {
                            "query": product,
                            "fields": ["full_name", "name", "description"],
                            "type": "best_fields",
                            "fuzziness": "AUTO"
                        }
                    },
                    "filter": {
                        "geo_distance": {
                            "distance": "200km",
                            "location": {
                                "lat": latitude,
                                "lon": longitude
                            }
                        }
                    }
                }
            },
            "size": 1
        }))
        .send()
        .await?;
    parse_response(response).await
}

/// Fetch a single product in a specific shop based on location.
pub async fn fetch_product_in_shop(
    app_state: &Arc<AppState>,
    product: &str,
    shop: &str,
    latitude: f64,
    longitude: f64,
) -> Result<Vec<ProductResult>, Box<dyn std::error::Error + Send + Sync>> {
    let client = app_state.client.lock().await;
    let response = client
        .search(SearchParts::Index(&["products"]))
        .body(json!({
            "_source": ["full_name", "name", "description", "current_price", "discount", "grocery", "lat", "lon"],
            "query": {
                "bool": {
                    "must": [
                        { 
                            "term": { 
                                "name.keyword": { 
                                    "value": product 
                                } 
                            } 
                        },
                        { 
                            "term": { 
                                "grocery.keyword": { 
                                    "value": shop 
                                } 
                            } 
                        }
                    ],
                    "filter": {
                        "geo_distance": {
                            "distance": "200km",
                            "location": {
                                "lat": latitude,
                                "lon": longitude
                            }
                        }
                    }
                }
            },
            "size": 1
        }))
        .send()
        .await?;
    parse_response(response).await
}


/// Esegue una query per ottenere prodotti usando la query ibrida costruita da `build_product_query`
pub async fn fetch_lowest_price_shops(
    app_state: &Arc<AppState>,
    products: &[String],
    position: &Position,
) -> Result<HashMap<String, Vec<ProductResult>>, Box<dyn std::error::Error + Send + Sync>> {
    let mut product_prices: HashMap<String, Vec<ProductResult>> = HashMap::new();
    let client = app_state.client.lock().await;

    for product in products.iter() {
        let es_query = build_product_query(product, position);
        let response = client
            .search(SearchParts::Index(&["products"]))
            .body(es_query)
            .send()
            .await?;
        // let shop_products = parse_response(response).await?;
        // product_prices.insert(product.clone(), shop_products);

        // Filtra i risultati per includere solo quelli che, dopo sanitizzazione, corrispondono esattamente all'input
        let shop_products: Vec<ProductResult> = parse_response(response).await?
            .into_iter()
            //.filter(|pr| sanitize(&pr.name) == sanitize(product))
            .filter(|pr| sanitize(&pr.name).contains(&sanitize(product))) //Accettiamo come match se il nome del prodotto (sanitizzato) contiene il termine dell'input sanitizzato
            .collect();
        product_prices.insert(product.clone(), shop_products);
    }
    Ok(product_prices)
}



/// Converte la risposta di Elasticsearch in un vettore di `ProductResult`
pub async fn parse_response(
    response: elasticsearch::http::response::Response,
) -> Result<Vec<ProductResult>, Box<dyn std::error::Error + Send + Sync>> {
    let json_resp = response.json::<serde_json::Value>().await?;
    tracing::debug!("Elasticsearch response: {:#?}", json_resp);
    let empty_vec = vec![];
    let hits = json_resp["hits"]["hits"].as_array().unwrap_or(&empty_vec);
    let products = hits.iter().map(|hit| {
        let source = &hit["_source"];
        ProductResult {
            _id: hit["_id"].as_str().unwrap_or("").to_string(),
            full_name: source["full_name"].as_str().unwrap_or("").to_string(),
            name: source["name"].as_str().unwrap_or("").to_string(),
            description: source["description"].as_str().unwrap_or("").to_string(),
            price: source["current_price"].as_f64().unwrap_or(0.0),
            discount: source.get("discount").and_then(|d| d.as_f64()),
            distance: None,
            localization: crate::models::Localization {
                grocery: source["grocery"].as_str().unwrap_or("").to_string(),
                lat: source["lat"].as_f64().unwrap_or(0.0),
                lon: source["lon"].as_f64().unwrap_or(0.0),
            },
        }
    }).collect();
    Ok(products)
}

pub fn build_product_query(product_input: &str, position: &Position) -> serde_json::Value {
    json!({
        "query": {
            "bool": {
                "should": [
                    {
                        "term": {
                            "name.keyword": {
                                "value": sanitize(product_input),
                                "boost": 5.0
                            }
                        }
                    },
                    {
                        "multi_match": {
                            "query": product_input,
                            "type": "phrase_prefix",
                            "fields": ["full_name^3", "name", "description"]
                        }
                    },
                    {
                        "multi_match": {
                            "query": product_input,
                            "fields": ["full_name^3", "name", "description"],
                            "fuzziness": "AUTO"
                        }
                    }
                ],
                "minimum_should_match": 1,
                "filter": {
                    "geo_distance": {
                        "distance": "100km",
                        "location": {
                            "lat": position.latitude,
                            "lon": position.longitude
                        }
                    }
                }
            }
        }
    })
}
//search-service/src/utils.rs

pub fn haversine_distance(
    lat1: f64,
    lon1: f64,
    lat2: f64,
    lon2: f64,
) -> f64 {
    let earth_radius = 6371.0; // Raggio medio della Terra in km

    let dlat = (lat2 - lat1).to_radians();
    let dlon = (lon2 - lon1).to_radians();

    let a = (dlat / 2.0).sin().powi(2)
        + lat1.to_radians().cos() * lat2.to_radians().cos() * (dlon / 2.0).sin().powi(2);
    let c = 2.0 * a.sqrt().asin();

    earth_radius * c
}

/// Trasforma l’input in minuscolo, rimuove i caratteri speciali e sostituisce gli spazi con underscore.
/// Esempio: "brodo di verdure" -> "brodo_di_verdure"
pub fn sanitize(input: &str) -> String {
    input
        .to_lowercase()
        .replace(|c: char| !c.is_alphanumeric() && !c.is_whitespace(), "")
        .split_whitespace()
        .collect::<Vec<&str>>()
        .join("_")
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_sanitize() {
        assert_eq!(sanitize("Brodo di Verdure"), "brodo_di_verdure");
        assert_eq!(sanitize("burro_consorzio_produttori_latte_maremma_250_g"), "burro_consorzio_produttori_latte_maremma_250_g");
    }
}
