# services:

#   web-client:
#     build: 
#       context: ./web-client
#       target: dev
#       dockerfile: Dockerfile
#     ports:
#       - "3000:3000"
#     volumes:
#       # Mount the web-client directory to the container (live reloading)
#       - ./web-client:/app
#       # separate host node_modules from container node_modules
#       - /app/node_modules
#       - /app/.next
#     command: npm run dev
#     environment:
#       - NODE_ENV=${NODE_ENV}
#       - LOG_LEVEL=${LOG_LEVEL}
#       - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL}
#       - API_BASE_URL=${API_BASE_URL}  # Redundant/Conflicting
#       - NAME_COOKIE_ACCESS=${NAME_COOKIE_ACCESS}
#       - NAME_COOKIE_REFRESH=${NAME_COOKIE_REFRESH}
#     networks:
#       - shared-network
    
#   auth-service:
#     build: 
#       context: ./auth-service
#       dockerfile: Dockerfile
#     ports:
#     - "4000:4000"
#     #- "5555:5555" # Exposes Prisma Studio
#     depends_on:
#       db:
#         condition: service_healthy
#     environment:
#       - AUTH_SERVICE_PORT=4000
#       - AUTH_DATABASE_URL=postgresql://user:postgrespw@db:5432/authdb  # Updated to authdb
#       - ACCESS_TOKEN_SECRET=access_token_secret
#       - REFRESH_TOKEN_SECRET=refresh_token_secret
#     env_file:
#       - ./auth-service/.env
#     networks:
#       - shared-network

#   search-service:
#     build: 
#       context: ./search-service
#       dockerfile: Dockerfile
#     ports:
#       - "4001:4001"
#     environment:
#       - SEARCH_SERVICE_PORT=${SEARCH_SERVICE_PORT}
#       - ELASTICSEARCH_URL=http://elasticsearch:9200

#   product-receiver-service:
#     build: 
#       context: ./product-receiver-service
#       dockerfile: Dockerfile
#     depends_on:
#       db: 
#           condition: service_healthy
#     ports:
#       - "3002:3002"
#     environment:
#       - PRODUCT_RECEIVER_SERVICE_PORT=${PRODUCT_RECEIVER_SERVICE_PORT}
#       - DATABASE_URL=postgresql://user:postgrespw@db:5432/appdb
#     volumes:
#       - ./product-receiver-service:/app

#   db:
#     image: postgres:13
#     restart: always
#     ports:
#       - "5432:5432"
#     environment:
#       #PGUSER: user
#       POSTGRES_USER: user
#       POSTGRES_PASSWORD: postgrespw
#       POSTGRES_DB: authdb
#     healthcheck:
#       #test: "pg_isready -h db"
#       test: ["CMD", "pg_isready", "-U", "user"]
#       interval: 5s
#       timeout: 5s
#       retries: 5
#     networks:
#       - shared-network
#     volumes:
#       - pgdata:/var/lib/postgresql/data
#       - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql



#   adminer:
#     image: adminer
#     restart: always
#     command: php -S [::]:8090 -t /var/www/html
#     ports:
#       - 8090:8090
#     networks:
#       - shared-network


services:

  web-client:
    build: 
      context: ./web-client
      target: dev
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./web-client:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev
    env_file:
      - ./web-client/.env
    networks:
      - shared-network


  auth-service:
    build: 
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - AUTH_SERVICE_PORT=4000
      - AUTH_DATABASE_URL=postgresql://user:postgrespw@db:5432/authdb?schema=public
      - ACCESS_TOKEN_SECRET=access_token_secret
      - REFRESH_TOKEN_SECRET=refresh_token_secret
    env_file:
      - ./auth-service/.env
    networks:
      - shared-network


  product-receiver-service:
    build: 
      context: ./product-receiver-service
      dockerfile: Dockerfile
    depends_on:
      db: 
        condition: service_healthy
    ports:
      - "3002:3002"
    environment:
      - PRODUCT_RECEIVER_SERVICE_PORT=${PRODUCT_RECEIVER_SERVICE_PORT}
      # - DATABASE_URL=postgresql://user:postgrespw@db:5432/appdb
      - DATABASE_URL=postgresql://user:postgrespw@db:5432/appdb?schema=public
    volumes:
      - ./product-receiver-service:/app
    networks:
      - shared-network

  db:
    image: postgres:13
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: postgrespw
      POSTGRES_MULTIPLE_DATABASES: authdb,appdb  # Define both databases
    healthcheck:
      #test: ["CMD", "pg_isready", "-U", "user"]
      test: ["CMD-SHELL", "pg_isready -h db -U user"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - shared-network
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  adminer:
    image: adminer
    restart: always
    command: php -S [::]:8090 -t /var/www/html
    ports:
      - 8090:8090
    networks:
      - shared-network

  uptime-kuma:
    image: louislam/uptime-kuma:1
    restart: unless-stopped
    network_mode: host
    ports:
      - 3003:3003
    volumes:
      - ./data:/app/data
    environment:
      - UPTIME_KUMA_PORT=${UPTIME_KUMA_PORT}

  traefik:
    image: docker.io/library/traefik:v3.1.6
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      # enable dashboard, don't do in production
      - "8080:8080"
    volumes:
      - /run/docker.sock:/run/docker.sock:ro
      - ./config/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./config/conf.d/:/etc/traefik/conf.d/:ro
      - ./certs/:/var/traefik/certs/:rw

  elasticsearch:
    build:
      context: elasticsearch/
      dockerfile: Dockerfile
      args: 
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - ./elasticsearch/setup-elasticsearch.sh:/usr/share/elasticsearch/setup-elasticsearch.sh
      - elasticsearch:/usr/share/elasticsearch/data:Z
    entrypoint: |
      sh -c "
        elasticsearch &
        chmod +x /usr/share/elasticsearch/setup-elasticsearch.sh &&
        sleep 10 &&
        /usr/share/elasticsearch/setup-elasticsearch.sh &&
        wait
      "
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      discovery.type: single-node
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
    restart: unless-stopped

  logstash:
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xmx256m -Xms256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    ports:
      - "5601:5601"
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch
    restart: unless-stopped

  notification-alert:
    build: ./notification-alert
    ports:
      - "5000:5000"

volumes:
  pgdata: 
  elasticsearch:

networks:
  shared-network:
    driver: bridge
