services:

  web-client:
    build: 
      context: ./web-client
      target: dev
      dockerfile: Dockerfile
    image: ghcr.io/fchieric/web-client:latest
    ports:
      - "3000:3000"
    volumes:
      - ./web-client:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev
    environment:
      - NODE_ENV=${NODE_ENV}
      - LOG_LEVEL=${LOG_LEVEL}
      - API_BASE_URL=${API_BASE_URL}
      - NAME_COOKIE_ACCESS=${NAME_COOKIE_ACCESS}
      - NAME_COOKIE_REFRESH=${NAME_COOKIE_REFRESH}

  auth-service:
    build: 
      context: ./auth-service
      dockerfile: Dockerfile
    image: ghcr.io/fchieric/auth-service:latest
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - AUTH_SERVICE_PORT=${AUTH_SERVICE_PORT}
      - AUTH_DATABASE_URL=${AUTH_DATABASE_URL}
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}

  search-service:
    build: 
      context: ./search-service
      dockerfile: Dockerfile
    image: ghcr.io/fchieric/search-service:latest
    ports:
      - "4001:4001"
    environment:
      - SEARCH_SERVICE_PORT=${SEARCH_SERVICE_PORT}

  scraping-service:
    build: 
      context: ./scraping-service
      dockerfile: Dockerfile
    image: ghcr.io/fchieric/scraping-service:latest
    depends_on:
      - product-receiver-service
    volumes:
      - ./scraping-service:/app
    environment:
      - PRODUCT_RECEIVER_BASE_URL=${PRODUCT_RECEIVER_BASE_URL}

  product-receiver-service:
    build: 
      context: ./product-receiver-service
      dockerfile: Dockerfile
    image: ghcr.io/fchieric/product-receiver-service:latest
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3002:3002"
    environment:
      - PRODUCT_RECEIVER_SERVICE_PORT=${PRODUCT_RECEIVER_SERVICE_PORT}
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - ./product-receiver-service:/app

  db:
    image: postgres:13
    restart: always
    ports:
      - "5432:5432"
    environment:
      PGUSER: user
      POSTGRES_USER: user
      POSTGRES_PASSWORD: postgrespw
      POSTGRES_DB: appdb
    healthcheck:
      test: "pg_isready -h db"
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  adminer:
    image: adminer
    restart: always
    command: php -S [::]:8090 -t /var/www/html
    ports:
      - 8090:8090

  uptime-kuma:
    image: louislam/uptime-kuma:1
    restart: unless-stopped
    network_mode: host
    ports:
      - 3003:3003
    volumes:
      - ./data:/app/data
    environment:
      - UPTIME_KUMA_PORT=${UPTIME_KUMA_PORT}

  traefik:
    image: docker.io/library/traefik:v3.1.6
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      # enable dashboard, don't do in production
      - "8080:8080"
    volumes:
      - /run/docker.sock:/run/docker.sock:ro
      - ./config/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./config/conf.d/:/etc/traefik/conf.d/:ro
      - ./certs/:/var/traefik/certs/:rw
      
volumes:
  pgdata: 
